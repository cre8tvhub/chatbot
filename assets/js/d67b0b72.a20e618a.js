"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9649],{69299:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var a=t(85893),o=t(11151);const r={},s="Configuration Reference",c={id:"evaluation/configuration-reference",title:"Configuration Reference",description:"This page contains reference documentation for the configuration options for the MongoDB Chatbot Evaluation CLI.",source:"@site/docs/evaluation/configuration-reference.md",sourceDirName:"evaluation",slug:"/evaluation/configuration-reference",permalink:"/chatbot/evaluation/configuration-reference",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb/chatbot/tree/main/docs/docs/evaluation/configuration-reference.md",tags:[],version:"current",frontMatter:{},sidebar:"main",previous:{title:"CLI Command Reference",permalink:"/chatbot/evaluation/command-reference"},next:{title:"Pipelines",permalink:"/chatbot/evaluation/pipeline"}},i={},l=[{value:"API Reference",id:"api-reference",level:2},{value:"<code>ConfigConstructor</code>",id:"configconstructor",level:2},{value:"Data Stores",id:"data-stores",level:2},{value:"<code>CommandMetadataStore</code>",id:"commandmetadatastore",level:3},{value:"<code>MongoDBCommandMetadataStore</code>",id:"mongodbcommandmetadatastore",level:4},{value:"<code>GeneratedDataStore</code>",id:"generateddatastore",level:3},{value:"<code>MongoDBGeneratedDataStore</code>",id:"mongodbgenerateddatastore",level:4},{value:"<code>EvaluationStore</code>",id:"evaluationstore",level:3},{value:"<code>MongoDBEvaluationStore</code>",id:"mongodbevaluationstore",level:4},{value:"<code>ReportStore</code>",id:"reportstore",level:3},{value:"<code>MongoDBReportStore</code>",id:"mongodbreportstore",level:4},{value:"Test Cases",id:"test-cases",level:2},{value:"Load test cases from a file",id:"load-test-cases-from-a-file",level:3},{value:"Command Executor Functions",id:"command-executor-functions",level:2},{value:"<code>GenerateDataFunc</code>",id:"generatedatafunc",level:3},{value:"<code>EvaluateQualityFunc</code>",id:"evaluatequalityfunc",level:3},{value:"<code>ReportEvalFunc</code>",id:"reportevalfunc",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"configuration-reference",children:"Configuration Reference"}),"\n",(0,a.jsx)(n.p,{children:"This page contains reference documentation for the configuration options for the MongoDB Chatbot Evaluation CLI."}),"\n",(0,a.jsxs)(n.p,{children:["An Evaluation CLI config file is a CommonJS file that exports a ",(0,a.jsx)(n.code,{children:"ConfigConstructor"})," function as its default export."]}),"\n",(0,a.jsxs)(n.p,{children:["For an example of setting up a configuration file, refer to the ",(0,a.jsx)(n.a,{href:"/chatbot/evaluation/",children:"Configuration"})," documentation."]}),"\n",(0,a.jsxs)(n.p,{children:["You need to install the Evaluation CLI to configure it. Refer to the ",(0,a.jsx)(n.a,{href:"/chatbot/evaluation/#install",children:"Installation"})," documentation for instructions."]}),"\n",(0,a.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,a.jsxs)(n.p,{children:["For a full API reference of all modules exported by ",(0,a.jsx)(n.code,{children:"mongodb-chatbot-evaluation"}),", refer to the ",(0,a.jsx)(n.a,{href:"../reference/evaluation/",children:"API Reference"})," documentation."]}),"\n",(0,a.jsx)(n.p,{children:"This page links to the key reference documentation for configuring the Ingest CLI."}),"\n",(0,a.jsx)(n.h2,{id:"configconstructor",children:(0,a.jsx)(n.code,{children:"ConfigConstructor"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#configconstructor",children:(0,a.jsx)(n.code,{children:"ConfigConstructor"})})," function is the root configuration type for the Ingest CLI. This exports an ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/interfaces/EvalConfig",children:(0,a.jsx)(n.code,{children:"EvalConfig"})})," object."]}),"\n",(0,a.jsx)(n.h2,{id:"data-stores",children:"Data Stores"}),"\n",(0,a.jsx)(n.h3,{id:"commandmetadatastore",children:(0,a.jsx)(n.code,{children:"CommandMetadataStore"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/interfaces/CommandMetadataStore",children:(0,a.jsx)(n.code,{children:"CommandMetadataStore"})})," is an interface for storing metadata of each command run."]}),"\n",(0,a.jsx)(n.h4,{id:"mongodbcommandmetadatastore",children:(0,a.jsx)(n.code,{children:"MongoDBCommandMetadataStore"})}),"\n",(0,a.jsxs)(n.p,{children:["To create a ",(0,a.jsx)(n.code,{children:"CommandMetadataStore"})," that stores data in MongoDB,\nuse the constructor function ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#makemongodbcommandmetadatastore",children:(0,a.jsx)(n.code,{children:"makeMongoDbCommandMetadataStore()"})}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { makeMongoDbCommandMetadataStore } from "mongodb-chatbot-evaluation";\n\nconst commandMetadataStore = makeMongoDbCommandMetadataStore({\n  connectionUri: MONGODB_CONNECTION_URI,\n  databaseName: MONGODB_DATABASE_NAME,\n});\n'})}),"\n",(0,a.jsx)(n.h3,{id:"generateddatastore",children:(0,a.jsx)(n.code,{children:"GeneratedDataStore"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/interfaces/GeneratedDataStore",children:(0,a.jsx)(n.code,{children:"GeneratedDataStore"})})," is an interface for storing and working with generated evaluation data."]}),"\n",(0,a.jsx)(n.h4,{id:"mongodbgenerateddatastore",children:(0,a.jsx)(n.code,{children:"MongoDBGeneratedDataStore"})}),"\n",(0,a.jsxs)(n.p,{children:["To create a ",(0,a.jsx)(n.code,{children:"GeneratedDataStore"})," that stores data in MongoDB,\nuse the constructor function ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#makemongodbgenerateddatastore",children:(0,a.jsx)(n.code,{children:"makeMongoDbGeneratedDataStore()"})}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { makeMongoDbGeneratedDataStore } from "mongodb-chatbot-evaluation";\n\nconst generatedDataStore = makeMongoDbGeneratedDataStore({\n  connectionUri: MONGODB_CONNECTION_URI,\n  databaseName: MONGODB_DATABASE_NAME,\n});\n'})}),"\n",(0,a.jsx)(n.h3,{id:"evaluationstore",children:(0,a.jsx)(n.code,{children:"EvaluationStore"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/interfaces/EvaluationStore",children:(0,a.jsx)(n.code,{children:"EvaluationStore"})})," is an interface for storing and accessing the results of an evaluation."]}),"\n",(0,a.jsx)(n.h4,{id:"mongodbevaluationstore",children:(0,a.jsx)(n.code,{children:"MongoDBEvaluationStore"})}),"\n",(0,a.jsxs)(n.p,{children:["To create an ",(0,a.jsx)(n.code,{children:"EvaluationStore"})," that stores data in MongoDB,\nuse the constructor function ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#makemongodbevaluationstore",children:(0,a.jsx)(n.code,{children:"makeMongoDbEvaluationStore()"})}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { makeMongoDbEvaluationStore } from "mongodb-chatbot-evaluation";\n\nconst evaluationStore = makeMongoDbEvaluationStore({\n  connectionUri: MONGODB_CONNECTION_URI,\n  databaseName: MONGODB_DATABASE_NAME,\n});\n'})}),"\n",(0,a.jsx)(n.h3,{id:"reportstore",children:(0,a.jsx)(n.code,{children:"ReportStore"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/interfaces/ReportStore",children:(0,a.jsx)(n.code,{children:"ReportStore"})})," is an interface for storing reports on the results of evaluation runs."]}),"\n",(0,a.jsx)(n.h4,{id:"mongodbreportstore",children:(0,a.jsx)(n.code,{children:"MongoDBReportStore"})}),"\n",(0,a.jsxs)(n.p,{children:["To create a ",(0,a.jsx)(n.code,{children:"ReportStore"})," that stores data in MongoDB,\nuse the constructor function ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#makemongodbreportstore",children:(0,a.jsx)(n.code,{children:"makeMongoDbReportStore()"})}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { makeMongoDbReportStore } from "mongodb-chatbot-evaluation";\n\nconst reportStore = makeMongoDbReportStore({\n  connectionUri: MONGODB_CONNECTION_URI,\n  databaseName: MONGODB_DATABASE_NAME,\n});\n'})}),"\n",(0,a.jsx)(n.h2,{id:"test-cases",children:"Test Cases"}),"\n",(0,a.jsxs)(n.p,{children:["You must provide test cases to evaluate the chatbot. Pass the test cases to the ",(0,a.jsx)(n.code,{children:"commands.generate"})," property in the ",(0,a.jsx)(n.code,{children:"EvalConfig"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const testCases: ConversationTestCase[] = [\n  {\n    name: `It understands "why the chicken crossed the road" jokes`,\n    expectation: `\n      The ASSISTANT responds with a completion of the classic chicken crossing the road joke.\n      The joke should be completed in a way that is both humorous and appropriate.\n    `,\n    tags: ["joke"],\n    messages: [\n      { role: "user", content: "Why did the chicken cross the road?" }\n    ]\n  },\n];\n\nconst evalConfig: EvalConfig = {\n  // ... other fields,\n  commands: {\n    generate: {\n      myTest: {\n        type: "conversation",\n        // highlight-start\n        testCases: testCases,\n        // highlight-end\n        generator: makeGenerateConversationData({ ... }),\n      },\n    },\n    evaluate: { /* ... */ },\n    report: { /* ... */ },\n  },\n};\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"mongodb-chatbot-evaluation"})," package includes built-in support for the ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/interfaces/ConversationTestCase",children:(0,a.jsx)(n.code,{children:"ConversationTestCase"})})," type.\nYou can use this to evaluate the chatbot's performance on conversation data."]}),"\n",(0,a.jsx)(n.h3,{id:"load-test-cases-from-a-file",children:"Load test cases from a file"}),"\n",(0,a.jsxs)(n.p,{children:["You can load ",(0,a.jsx)(n.code,{children:"ConversationTestCase"})," object from a YAML file using the ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#getconversationstestcasesfromyaml",children:(0,a.jsx)(n.code,{children:"getConversationsTestCasesFromYaml()"})})," function."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { getConversationsTestCasesFromYaml } from "mongodb-chatbot-evaluation";\n\nconst testCases = getConversationsTestCasesFromYaml("path/to/test-cases.yaml");\n'})}),"\n",(0,a.jsx)(n.h2,{id:"command-executor-functions",children:"Command Executor Functions"}),"\n",(0,a.jsx)(n.p,{children:"These functions are used to execute commands in the pipeline.\nThere are different functions for the different commands."}),"\n",(0,a.jsx)(n.h3,{id:"generatedatafunc",children:(0,a.jsx)(n.code,{children:"GenerateDataFunc"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#generatedatafunc",children:(0,a.jsx)(n.code,{children:"GenerateDataFunc"})})," is a function that generates data to be evaluated."]}),"\n",(0,a.jsxs)(n.p,{children:["Pass a ",(0,a.jsx)(n.code,{children:"GenerateDataFunc"})," to the ",(0,a.jsx)(n.code,{children:"commands.generate"})," property in the ",(0,a.jsx)(n.code,{children:"EvalConfig"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"mongodb-chatbot-evaluation"})," package includes the following ",(0,a.jsx)(n.code,{children:"GenerateDataFunc"})," implementation functions:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#makegenerateconversationdata",children:(0,a.jsx)(n.code,{children:"makeGenerateConversationData()"})}),": Generates conversation data from the test cases.\nThe function calls a MongoDB Chatbot Server API to create conversations and add messages.\nThis lets you evaluate the chatbot's performance on a running server to get behavior resembling how your actual app behaves."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#makegeneratellmconversationdata",children:(0,a.jsx)(n.code,{children:"makeGenerateLlmConversationData()"})}),": Generates conversation data from the test cases.\nThe function calls a ",(0,a.jsx)(n.a,{href:"/chatbot/reference/server/interfaces/ChatLlm",children:(0,a.jsx)(n.code,{children:"ChatLlm"})})," instance to generate responses. This is useful to see how a language model without retrieval-augmented generation performs on a test case."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Example of using ",(0,a.jsx)(n.code,{children:"makeGenerateConversationData()"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'// eval.config.ts\nimport { makeGenerateConversationData } from "mongodb-chatbot-evaluation";\n\nconst generateDataFunc = makeGenerateConversationData({\n  conversations,\n  httpHeaders: {\n    Origin: "Testing",\n  },\n  apiBaseUrl: CONVERSATIONS_SERVER_BASE_URL,\n});\n\nexport default async function configConstructor() {\n  return {\n    // ... other configuration options\n    commands: {\n      generate: {\n        conversations: {\n          type: "conversation",\n          testCases: someTestCases,\n          generator: generateDataFunc,\n        },\n      },\n      // ... other commands\n    },\n  };\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"evaluatequalityfunc",children:(0,a.jsx)(n.code,{children:"EvaluateQualityFunc"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#evaluatequalityfunc",children:(0,a.jsx)(n.code,{children:"EvaluateQualityFunc"})})," is a function that evaluates some quality of generated data."]}),"\n",(0,a.jsxs)(n.p,{children:["Pass an ",(0,a.jsx)(n.code,{children:"EvaluateQualityFunc"})," to the ",(0,a.jsx)(n.code,{children:"commands.evaluate"})," property in the ",(0,a.jsx)(n.code,{children:"EvalConfig"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"mongodb-chatbot-evaluation"})," package includes the following ",(0,a.jsx)(n.code,{children:"EvaluateQualityFunc"})," implementation functions:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#makeevaluateconversationquality",children:(0,a.jsx)(n.code,{children:"makeEvaluateConversationQuality()"})}),": Evaluates the quality of a conversation by comparing the generated response to a provided expectation.\nThe function uses the OpenAI API to evaluate the quality of the responses."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#makeevaluateconversationfaithfulness",children:(0,a.jsx)(n.code,{children:"makeEvaluateConversationFaithfulness()"})}),": Evaluates the faithfulness of a conversation by comparing the generated response to the context information retrieved before generating an answer."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#evaluateconversationaverageretrievalscore",children:(0,a.jsx)(n.code,{children:"evaluateConversationAverageRetrievalScore()"})}),": Evaluates the average retrieval score of a conversation by comparing the generated responses to a provided expectation."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Example of using ",(0,a.jsx)(n.code,{children:"makeEvaluateConversationQuality()"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'// eval.config.ts\n\nimport { makeEvaluateConversationQuality } from "mongodb-chatbot-evaluation";\nimport { OpenAIClient, AzureKeyCredential } from "@azure/openai";\n\nconst evaluateQualityFunc = makeEvaluateConversationQuality({\n  deploymentName: OPENAI_CHAT_COMPLETION_DEPLOYMENT,\n  openAiClient: new OpenAIClient(\n    OPENAI_ENDPOINT,\n    new AzureKeyCredential(OPENAI_API_KEY)\n  ),\n});\n\nexport default async function configConstructor() {\n  return {\n    // ... other configuration options\n    commands: {\n      evaluate: {\n        conversationQuality: {\n          evaluator: evaluateQualityFunc,\n        },\n      },\n      // ... other commands\n    },\n  };\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"reportevalfunc",children:(0,a.jsx)(n.code,{children:"ReportEvalFunc"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#reportevalfunc",children:(0,a.jsx)(n.code,{children:"ReportEvalFunc"})})," is a function that generates a report from the evaluation data."]}),"\n",(0,a.jsxs)(n.p,{children:["Pass a ",(0,a.jsx)(n.code,{children:"ReportEvalFunc"})," to the ",(0,a.jsx)(n.code,{children:"commands.report"})," property in the ",(0,a.jsx)(n.code,{children:"EvalConfig"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"mongodb-chatbot-evaluation"})," package includes the following ",(0,a.jsx)(n.code,{children:"ReportEvalFunc"})," implementation functions:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#reportstatsforbinaryevalrun",children:(0,a.jsx)(n.code,{children:"reportStatsForBinaryEvalRun()"})}),": Generates a report for a binary evaluation run, one that has results of either ",(0,a.jsx)(n.code,{children:"0"})," or ",(0,a.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/chatbot/reference/evaluation/modules#reportaveragescore",children:(0,a.jsx)(n.code,{children:"reportAverageScore()"})}),": Generates a report for the average score of a set of evaluation data."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Example of using ",(0,a.jsx)(n.code,{children:"reportStatsForBinaryEvalRun()"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'// eval.config.ts\n\nimport { reportStatsForBinaryEvalRun } from "mongodb-chatbot-evaluation";\n\nexport default async function configConstructor() {\n  return {\n    // ... other configuration options\n    commands: {\n      // ... other commands\n      report: {\n        binaryEvalRun: {\n          reporter: reportStatsForBinaryEvalRun,\n        },\n      },\n    },\n  };\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>s});var a=t(67294);const o={},r=a.createContext(o);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);